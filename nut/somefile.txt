# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Remove `managed = False` lines if you wish to allow Django to create and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
#
# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [appname]'
# into your database.
from __future__ import unicode_literals

from django.db import models

class AuthGroup(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=80)
    class Meta:
        managed = False
        db_table = 'auth_group'

class AuthGroupPermissions(models.Model):
    id = models.IntegerField(primary_key=True)
    group = models.ForeignKey(AuthGroup)
    permission = models.ForeignKey('AuthPermission')
    class Meta:
        managed = False
        db_table = 'auth_group_permissions'

class AuthPermission(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=50)
    content_type = models.ForeignKey('DjangoContentType')
    codename = models.CharField(max_length=100)
    class Meta:
        managed = False
        db_table = 'auth_permission'

class CaptchaCaptchastore(models.Model):
    id = models.IntegerField(primary_key=True)
    challenge = models.CharField(max_length=32)
    response = models.CharField(max_length=32)
    hashkey = models.CharField(unique=True, max_length=40)
    expiration = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'captcha_captchastore'

class CeleryTaskmeta(models.Model):
    id = models.IntegerField(primary_key=True)
    task_id = models.CharField(unique=True, max_length=255)
    status = models.CharField(max_length=50)
    result = models.TextField(blank=True)
    date_done = models.DateTimeField()
    traceback = models.TextField(blank=True)
    hidden = models.IntegerField()
    meta = models.TextField(blank=True)
    class Meta:
        managed = False
        db_table = 'celery_taskmeta'

class CeleryTasksetmeta(models.Model):
    id = models.IntegerField(primary_key=True)
    taskset_id = models.CharField(unique=True, max_length=255)
    result = models.TextField()
    date_done = models.DateTimeField()
    hidden = models.IntegerField()
    class Meta:
        managed = False
        db_table = 'celery_tasksetmeta'

class CoreArticle(models.Model):
    id = models.IntegerField(primary_key=True)
    creator = models.ForeignKey('CoreGkuser')
    title = models.CharField(max_length=255)
    cover = models.CharField(max_length=255)
    content = models.TextField()
    publish = models.IntegerField()
    created_datetime = models.DateTimeField(blank=True, null=True)
    updated_datetime = models.DateTimeField(blank=True, null=True)
    showcover = models.IntegerField()
    read_count = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'core_article'

class CoreArticleRelatedEntities(models.Model):
    id = models.IntegerField(primary_key=True)
    article = models.ForeignKey(CoreArticle)
    entity = models.ForeignKey('CoreEntity')
    class Meta:
        managed = False
        db_table = 'core_article_related_entities'

class CoreBanner(models.Model):
    id = models.IntegerField(primary_key=True)
    content_type = models.CharField(max_length=64)
    key = models.CharField(max_length=1024)
    image = models.CharField(max_length=64)
    created_time = models.DateTimeField()
    updated_time = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'core_banner'

class CoreBrand(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=100)
    alias = models.CharField(max_length=100, blank=True)
    icon = models.CharField(max_length=255, blank=True)
    company = models.CharField(max_length=100, blank=True)
    website = models.CharField(max_length=255, blank=True)
    national = models.CharField(max_length=100, blank=True)
    intro = models.TextField()
    status = models.IntegerField()
    created_date = models.DateTimeField()
    tmall_link = models.CharField(max_length=255, blank=True)
    class Meta:
        managed = False
        db_table = 'core_brand'

class CoreBuyLink(models.Model):
    id = models.IntegerField(primary_key=True)
    entity = models.ForeignKey('CoreEntity')
    origin_id = models.CharField(max_length=100)
    origin_source = models.CharField(max_length=255)
    cid = models.CharField(max_length=255, blank=True)
    link = models.CharField(max_length=255)
    price = models.DecimalField(max_digits=20, decimal_places=2)
    volume = models.IntegerField()
    rank = models.IntegerField()
    default = models.IntegerField()
    status = models.IntegerField()
    shop_link = models.CharField(max_length=255, blank=True)
    seller = models.CharField(max_length=255, blank=True)
    foreign_price = models.DecimalField(max_digits=20, decimal_places=2, blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'core_buy_link'

class CoreCategory(models.Model):
    id = models.IntegerField(primary_key=True)
    title = models.CharField(max_length=128)
    status = models.IntegerField()
    cover = models.CharField(max_length=256, blank=True)
    class Meta:
        managed = False
        db_table = 'core_category'

class CoreEditorRecommendation(models.Model):
    id = models.IntegerField(primary_key=True)
    image = models.CharField(max_length=255)
    link = models.CharField(max_length=255)
    created_time = models.DateTimeField()
    updated_time = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'core_editor_recommendation'

class CoreEdm(models.Model):
    id = models.IntegerField(primary_key=True)
    create_time = models.DateTimeField()
    verification = models.IntegerField()
    publish_time = models.DateTimeField()
    cover_image = models.CharField(max_length=255)
    articles = models.ForeignKey(CoreArticle)
    class Meta:
        managed = False
        db_table = 'core_edm'

class CoreEntity(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey('CoreGkuser', blank=True, null=True)
    entity_hash = models.CharField(unique=True, max_length=32)
    category = models.ForeignKey('CoreSubCategory')
    brand = models.CharField(max_length=256)
    title = models.CharField(max_length=256)
    intro = models.TextField()
    rate = models.DecimalField(max_digits=3, decimal_places=2)
    price = models.DecimalField(max_digits=20, decimal_places=2)
    mark = models.IntegerField()
    images = models.TextField()
    created_time = models.DateTimeField()
    updated_time = models.DateTimeField()
    status = models.IntegerField()
    alias = models.CharField(max_length=45, blank=True)
    class Meta:
        managed = False
        db_table = 'core_entity'

class CoreEntityLike(models.Model):
    id = models.IntegerField(primary_key=True)
    entity = models.ForeignKey(CoreEntity)
    user = models.ForeignKey('CoreGkuser')
    created_time = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'core_entity_like'

class CoreEntityTag(models.Model):
    id = models.IntegerField(primary_key=True)
    entity = models.ForeignKey(CoreEntity)
    user = models.ForeignKey('CoreGkuser')
    tag = models.ForeignKey('CoreTag')
    created_time = models.DateTimeField()
    last_tagged_time = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'core_entity_tag'

class CoreEvent(models.Model):
    id = models.IntegerField(primary_key=True)
    title = models.CharField(max_length=30)
    tag = models.CharField(max_length=30)
    slug = models.CharField(unique=True, max_length=100)
    status = models.IntegerField()
    created_datetime = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'core_event'

class CoreEventBanner(models.Model):
    id = models.IntegerField(primary_key=True)
    image = models.CharField(max_length=255)
    banner_type = models.IntegerField()
    user_id = models.CharField(max_length=30, blank=True)
    link = models.CharField(max_length=255, blank=True)
    created_time = models.DateTimeField()
    updated_time = models.DateTimeField()
    background_image = models.CharField(max_length=255, blank=True)
    background_color = models.CharField(max_length=14, blank=True)
    class Meta:
        managed = False
        db_table = 'core_event_banner'

class CoreEventStatus(models.Model):
    event = models.ForeignKey(CoreEvent, primary_key=True)
    is_published = models.IntegerField()
    is_top = models.IntegerField()
    class Meta:
        managed = False
        db_table = 'core_event_status'

class CoreFriendlyLink(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64)
    link = models.CharField(max_length=255)
    link_category = models.CharField(max_length=64)
    position = models.IntegerField(blank=True, null=True)
    logo = models.CharField(max_length=255, blank=True)
    status = models.IntegerField()
    class Meta:
        managed = False
        db_table = 'core_friendly_link'

class CoreGkuser(models.Model):
    id = models.IntegerField(primary_key=True)
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField()
    is_superuser = models.IntegerField()
    email = models.CharField(unique=True, max_length=255)
    is_active = models.IntegerField()
    is_admin = models.IntegerField()
    date_joined = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'core_gkuser'

class CoreGkuserGroups(models.Model):
    id = models.IntegerField(primary_key=True)
    gkuser = models.ForeignKey(CoreGkuser)
    group = models.ForeignKey(AuthGroup)
    class Meta:
        managed = False
        db_table = 'core_gkuser_groups'

class CoreGkuserUserPermissions(models.Model):
    id = models.IntegerField(primary_key=True)
    gkuser = models.ForeignKey(CoreGkuser)
    permission = models.ForeignKey(AuthPermission)
    class Meta:
        managed = False
        db_table = 'core_gkuser_user_permissions'

class CoreMedia(models.Model):
    id = models.IntegerField(primary_key=True)
    file_path = models.CharField(max_length=200)
    content_type = models.CharField(max_length=30)
    upload_datetime = models.DateTimeField(blank=True, null=True)
    creator_id = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'core_media'

class CoreNote(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(CoreGkuser)
    entity = models.ForeignKey(CoreEntity)
    note = models.TextField(blank=True)
    post_time = models.DateTimeField()
    updated_time = models.DateTimeField()
    status = models.IntegerField()
    class Meta:
        managed = False
        db_table = 'core_note'

class CoreNoteComment(models.Model):
    id = models.IntegerField(primary_key=True)
    note = models.ForeignKey(CoreNote)
    user = models.ForeignKey(CoreGkuser)
    content = models.TextField()
    replied_comment_id = models.IntegerField(blank=True, null=True)
    replied_user_id = models.IntegerField(blank=True, null=True)
    post_time = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'core_note_comment'

class CoreNotePoke(models.Model):
    id = models.IntegerField(primary_key=True)
    note = models.ForeignKey(CoreNote)
    user = models.ForeignKey(CoreGkuser)
    created_time = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'core_note_poke'

class CoreSelectionArticle(models.Model):
    id = models.IntegerField(primary_key=True)
    article = models.ForeignKey(CoreArticle)
    is_published = models.IntegerField()
    pub_time = models.DateTimeField(blank=True, null=True)
    create_time = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'core_selection_article'

class CoreSelectionEntity(models.Model):
    id = models.IntegerField(primary_key=True)
    entity = models.ForeignKey(CoreEntity, unique=True)
    is_published = models.IntegerField()
    pub_time = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'core_selection_entity'

class CoreShowBanner(models.Model):
    id = models.IntegerField(primary_key=True)
    banner = models.ForeignKey(CoreBanner, unique=True)
    created_time = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'core_show_banner'

class CoreShowEditorRecommendation(models.Model):
    id = models.IntegerField(primary_key=True)
    recommendation = models.ForeignKey(CoreEditorRecommendation, unique=True)
    event = models.ForeignKey(CoreEvent, blank=True, null=True)
    position = models.IntegerField()
    created_time = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'core_show_editor_recommendation'

class CoreShowEventBanner(models.Model):
    id = models.IntegerField(primary_key=True)
    banner = models.ForeignKey(CoreEventBanner, unique=True)
    event = models.ForeignKey(CoreEvent, blank=True, null=True)
    position = models.IntegerField()
    created_time = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'core_show_event_banner'

class CoreSidebarBanner(models.Model):
    id = models.IntegerField(primary_key=True)
    image = models.CharField(max_length=255)
    created_time = models.DateTimeField()
    updated_time = models.DateTimeField()
    link = models.CharField(max_length=255)
    position = models.IntegerField()
    status = models.IntegerField()
    class Meta:
        managed = False
        db_table = 'core_sidebar_banner'

class CoreSinaToken(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(CoreGkuser, unique=True)
    sina_id = models.CharField(max_length=64, blank=True)
    screen_name = models.CharField(max_length=64, blank=True)
    access_token = models.CharField(max_length=255, blank=True)
    create_time = models.DateTimeField()
    expires_in = models.IntegerField()
    updated_time = models.DateTimeField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'core_sina_token'

class CoreSubCategory(models.Model):
    id = models.IntegerField(primary_key=True)
    group = models.ForeignKey(CoreCategory)
    title = models.CharField(max_length=128)
    icon = models.CharField(max_length=64, blank=True)
    status = models.IntegerField()
    alias = models.CharField(max_length=45, blank=True)
    class Meta:
        managed = False
        db_table = 'core_sub_category'

class CoreTag(models.Model):
    id = models.IntegerField(primary_key=True)
    tag = models.CharField(unique=True, max_length=128)
    tag_hash = models.CharField(unique=True, max_length=32)
    status = models.IntegerField()
    creator = models.ForeignKey(CoreGkuser)
    created_time = models.DateTimeField()
    updated_time = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'core_tag'

class CoreTaobaoToken(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(CoreGkuser, unique=True)
    taobao_id = models.CharField(max_length=64, blank=True)
    screen_name = models.CharField(max_length=64, blank=True)
    access_token = models.CharField(max_length=255, blank=True)
    refresh_token = models.CharField(max_length=255, blank=True)
    create_time = models.DateTimeField()
    expires_in = models.IntegerField()
    re_expires_in = models.IntegerField()
    updated_time = models.DateTimeField(blank=True, null=True)
    open_uid = models.CharField(max_length=64, blank=True)
    isv_uid = models.CharField(max_length=64, blank=True)
    class Meta:
        managed = False
        db_table = 'core_taobao_token'

class CoreUserFollow(models.Model):
    id = models.IntegerField(primary_key=True)
    follower = models.ForeignKey(CoreGkuser)
    followee = models.ForeignKey(CoreGkuser)
    followed_time = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'core_user_follow'

class CoreUserProfile(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(CoreGkuser, unique=True)
    nickname = models.CharField(max_length=64)
    location = models.CharField(max_length=32, blank=True)
    city = models.CharField(max_length=32, blank=True)
    gender = models.CharField(max_length=2)
    bio = models.CharField(max_length=1024, blank=True)
    website = models.CharField(max_length=1024, blank=True)
    avatar = models.CharField(max_length=255)
    email_verified = models.IntegerField()
    class Meta:
        managed = False
        db_table = 'core_user_profile'

class CoreWechatToken(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(CoreGkuser, unique=True)
    unionid = models.CharField(max_length=255)
    nickname = models.CharField(max_length=255)
    updated_time = models.DateTimeField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'core_wechat_token'

class DjangoContentType(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=100)
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)
    class Meta:
        managed = False
        db_table = 'django_content_type'

class DjceleryCrontabschedule(models.Model):
    id = models.IntegerField(primary_key=True)
    minute = models.CharField(max_length=64)
    hour = models.CharField(max_length=64)
    day_of_week = models.CharField(max_length=64)
    day_of_month = models.CharField(max_length=64)
    month_of_year = models.CharField(max_length=64)
    class Meta:
        managed = False
        db_table = 'djcelery_crontabschedule'

class DjceleryIntervalschedule(models.Model):
    id = models.IntegerField(primary_key=True)
    every = models.IntegerField()
    period = models.CharField(max_length=24)
    class Meta:
        managed = False
        db_table = 'djcelery_intervalschedule'

class DjceleryPeriodictask(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=200)
    task = models.CharField(max_length=200)
    interval = models.ForeignKey(DjceleryIntervalschedule, blank=True, null=True)
    crontab = models.ForeignKey(DjceleryCrontabschedule, blank=True, null=True)
    args = models.TextField()
    kwargs = models.TextField()
    queue = models.CharField(max_length=200, blank=True)
    exchange = models.CharField(max_length=200, blank=True)
    routing_key = models.CharField(max_length=200, blank=True)
    expires = models.DateTimeField(blank=True, null=True)
    enabled = models.IntegerField()
    last_run_at = models.DateTimeField(blank=True, null=True)
    total_run_count = models.IntegerField()
    date_changed = models.DateTimeField()
    description = models.TextField()
    class Meta:
        managed = False
        db_table = 'djcelery_periodictask'

class DjceleryPeriodictasks(models.Model):
    ident = models.IntegerField(primary_key=True)
    last_update = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'djcelery_periodictasks'

class DjceleryTaskstate(models.Model):
    id = models.IntegerField(primary_key=True)
    state = models.CharField(max_length=64)
    task_id = models.CharField(unique=True, max_length=36)
    name = models.CharField(max_length=200, blank=True)
    tstamp = models.DateTimeField()
    args = models.TextField(blank=True)
    kwargs = models.TextField(blank=True)
    eta = models.DateTimeField(blank=True, null=True)
    expires = models.DateTimeField(blank=True, null=True)
    result = models.TextField(blank=True)
    traceback = models.TextField(blank=True)
    runtime = models.FloatField(blank=True, null=True)
    retries = models.IntegerField()
    worker = models.ForeignKey('DjceleryWorkerstate', blank=True, null=True)
    hidden = models.IntegerField()
    class Meta:
        managed = False
        db_table = 'djcelery_taskstate'

class DjceleryWorkerstate(models.Model):
    id = models.IntegerField(primary_key=True)
    hostname = models.CharField(unique=True, max_length=255)
    last_heartbeat = models.DateTimeField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'djcelery_workerstate'

class MobileApps(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(CoreGkuser)
    app_name = models.CharField(unique=True, max_length=30)
    desc = models.TextField()
    api_key = models.CharField(max_length=64)
    api_secret = models.CharField(max_length=32)
    created_time = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'mobile_apps'

class MobileSessionKey(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(CoreGkuser)
    app = models.ForeignKey(MobileApps)
    session_key = models.CharField(unique=True, max_length=64)
    create_time = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'mobile_session_key'

class NotificationsJpushtoken(models.Model):
    id = models.IntegerField(primary_key=True)
    rid = models.CharField(max_length=128)
    user = models.ForeignKey(CoreGkuser, blank=True, null=True)
    model = models.CharField(max_length=100)
    version = models.CharField(max_length=10)
    updated_time = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'notifications_jpushtoken'

class NotificationsNotification(models.Model):
    id = models.IntegerField(primary_key=True)
    level = models.CharField(max_length=20)
    recipient = models.ForeignKey(CoreGkuser)
    unread = models.IntegerField()
    actor_content_type = models.ForeignKey(DjangoContentType)
    actor_object_id = models.CharField(max_length=255)
    verb = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    target_content_type = models.ForeignKey(DjangoContentType, blank=True, null=True)
    target_object_id = models.CharField(max_length=255, blank=True)
    action_object_content_type = models.ForeignKey(DjangoContentType, blank=True, null=True)
    action_object_object_id = models.CharField(max_length=255, blank=True)
    timestamp = models.DateTimeField()
    public = models.IntegerField()
    class Meta:
        managed = False
        db_table = 'notifications_notification'

class ReportReport(models.Model):
    id = models.IntegerField(primary_key=True)
    reporter = models.ForeignKey(CoreGkuser)
    comment = models.TextField()
    content_type = models.ForeignKey(DjangoContentType)
    object_id = models.IntegerField()
    created_datetime = models.DateTimeField()
    type = models.IntegerField()
    progress = models.IntegerField()
    class Meta:
        managed = False
        db_table = 'report_report'

class ReportSelection(models.Model):
    id = models.IntegerField(primary_key=True)
    selected_total = models.IntegerField()
    pub_date = models.DateField()
    like_total = models.IntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'report_selection'

class TagContentTags(models.Model):
    id = models.IntegerField(primary_key=True)
    tag = models.ForeignKey('TagTags')
    creator = models.ForeignKey(CoreGkuser)
    target_content_type = models.ForeignKey(DjangoContentType, blank=True, null=True)
    target_object_id = models.BigIntegerField(blank=True, null=True)
    created_datetime = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'tag_content_tags'

class TagTags(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=100)
    hash = models.CharField(unique=True, max_length=32)
    status = models.IntegerField()
    image = models.CharField(max_length=255, blank=True)
    istoparticletag = models.IntegerField(db_column='isTopArticleTag') # Field name made lowercase.
    class Meta:
        managed = False
        db_table = 'tag_tags'

class WechatRobots(models.Model):
    id = models.IntegerField(primary_key=True)
    accept = models.CharField(unique=True, max_length=255)
    type = models.IntegerField()
    content = models.TextField()
    created_datetime = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'wechat_robots'

class WechatToken(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(CoreGkuser)
    open_id = models.CharField(max_length=255)
    joined_datetime = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'wechat_token'

